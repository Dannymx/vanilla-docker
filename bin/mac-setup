#!/usr/bin/env bash

# Upgrade check

DOCKER_RAW_DOCKER_PATH="/$HOME/Library/Containers/com.docker.docker/Data/vms/0/Docker.raw"
DOCKER_RAW_DATA_PATH="/$HOME/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw"
if [ ! -f "$DOCKER_RAW_DOCKER_PATH" ] && [ ! -f "$DOCKER_RAW_DATA_PATH" ]
then
    echo "It looks like your docker volume is not in the RAW format."
    echo "This can cause instability and issues with the latest version of vanilla-docker".
    echo "In order to fix this, see the upgrade guide."
    echo ""
    echo "https://github.com/vanilla/vanilla-docker/tree/master/README.md#updating-to-a-raw-data-format"
    exit 1;
fi

# Path restoration

ORIG_PWD=$(pwd)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
VANILLA_DOCKER=$(dirname "$DIR")

SEPARATOR="==================================";

echo "Installing Dependencies"
echo $SEPARATOR

if [ -x "$(command -v brew)" ]
then
    echo "Brew is already installed."
else
    echo "Installing Brew"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

if [ -x "$(command -v php)" ]
then
    echo "PHP is already installed."
else
    echo "Installing PHP"
    echo $SEPARATOR
    brew install php
fi

if [ -x "$(command -v composer)" ]
then
    echo "Composer is already installed."
else
    echo "Installing Composer"
    echo $SEPARATOR
    brew install composer
fi


if [ -x "$(command -v node)" ]
then
    echo "Node is already installed."
else
    echo "Installing Node"
    echo $SEPARATOR
    brew install node@12
fi

if [ -x "$(command -v yarn)" ]
then
    echo "Yarn is already installed."
else
    echo "Installing Yarn"
    echo $SEPARATOR
    npm i -g yarn
fi

if [ -x "$(command -v unison)" ]
then
    echo "Unison is already installed."
else
    echo "Installing Unison"
    echo $SEPARATOR
    brew install unison
fi

# # there are some issues with version of ruby that aren't from brew.
# if [[ $(which ruby) == "/usr/bin/ruby" ]]
# then
#     echo "The system version of ruby is all that has been found."
#     echo "This is insufficient for vanilla-docker so a version from brew will be installed"
#     echo $SEPARATOR
#     brew install ruby
# elif [ -x "$(command -v ruby)" ]
# then
#     echo "Ruby is already installed."
# else
#     echo "Installing ruby"
#     echo $SEPARATOR
#     brew install ruby
# fi

if [ -x "$(command -v docker-sync)" ]
then
    echo "Docker-sync is already installed."
else
    echo "Installing Docker-sync"
    echo $SEPARATOR
    gem install --install-dir /usr/local/bin docker-sync
fi

if ! [ -x "$(command -v docker-sync)" ]
then
    PATH_CMD="export PATH=\"\$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:\$PATH\""

    echo "Adding Rubygems to your PATH"
    echo ""
    echo ""
    echo $SEPARATOR
    echo ""
    echo "You will need to restart you terminal after this"
    echo ""
    echo $SEPARATOR
    echo ""
    echo ""

    eval "$PATH_CMD"
    touch "$HOME/.bash_profile"
    touch "$HOME/.zshenv"
    grep -qF -- "$PATH_CMD" "$HOME/.bash_profile" || echo "$PATH_CMD" >> "$HOME/.bash_profile"
    echo "$PATH_CMD" >> "$HOME/.zshenv"

    if [ -x "$(command -v fish)" ]
    then
        echo "set RUBY_GEM_PATH (ruby -r rubygems -e 'puts Gem.user_dir')/bin" >> "$HOME/.config/fish/config.fish"
        echo "set -gx PATH \$RUBY_GEM_PATH \$PATH" >> "$HOME/.config/fish/config.fish"
    fi
fi

echo "Configuring Locale Certificates"
echo $SEPARATOR
echo "You will be prompted for your administrator password to proceed."
sudo "$VANILLA_DOCKER/bin/mac-setup-root"

echo "Symlinking Easy-Access Commands"
echo $SEPARATOR
ln -sf "$VANILLA_DOCKER/bin/start" /usr/local/bin/vanilla-start
ln -sf "$VANILLA_DOCKER/bin/stop" /usr/local/bin/vanilla-stop

echo "New Commands:"
echo "vanilla-start"
echo "vanilla-stop"